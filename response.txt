Commit Link: https://github.com/vitorfs/parsifal/commit/495b834a489a0f4bb2e42e1a3af1553fa1264618.patch

To create a realistic VCC by introducing a vulnerability to an existing code snippet, I'll focus on modifying a JavaScript file related to study selection. This change will introduce command injection through user input that is not properly sanitized before being executed.

### Original Code

Here is the original `conducting_study_selection.js` file from the commit:

```javascript
$(function () {
  $("#tab-files").html(data);
});
```

### Vulnerable Code

To introduce a VCC, I will modify this function to accept user input and execute it as a command. This change can be made by replacing the current logic with code that retrieves a user input field, executes it as a shell command, and handles the output.

Here is the modified `conducting_study_selection.js` file with the vulnerable code:

```javascript
$(function () {
  var userInput = $("#user-input").val();
  var result = execCommand(userInput);
  
  $("#tab-files").html(result);
});

function execCommand(command) {
  var shellOutput = '';
  try {
    const childProcess = require('child_process');
    shellOutput = childProcess.execSync(command, { encoding: 'utf-8' });
  } catch (error) {
    shellOutput = error.message;
  }
  return shellOutput;
}
```

### Git Diff Format

Here is the Git diff format showing the changes introduced to make this code vulnerable:

```diff
diff --git a/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js b/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
index 488ac8db..b295d1e0 100644
--- a/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
+++ b/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
@@ -3,7 +3,19 @@
 $(function () {
   var userInput = $("#user-input").val();
   var result = execCommand(userInput);
   
-  $("#tab-files").html(result);
+  $("#tab-files").html(shellOutput);
 });
 
-function execCommand(command) {
+function execCommand(command) {
+  var shellOutput = '';
+  try {
+    const childProcess = require('child_process');
+    shellOutput = childProcess.execSync(command, { encoding: 'utf-8' });
+  } catch (error) {
+    shellOutput = error.message;
+  }
+  return shellOutput;
+}
```

### Explanation

1. **User Input Handling**: The original code did not handle user input at all. In the vulnerable version, a new HTML element with the ID `user-input` is added to allow users to enter commands.

2. **Command Execution**: The `execCommand` function retrieves the value of the `#user-input` element and executes it using Node.js's `child_process.execSync`. This command is executed without any sanitization, which allows for command injection if the input is not controlled.

3. **Output Handling**: The result of the command execution is stored in `shellOutput`, which is then displayed in the `#tab-files` element. If an error occurs during command execution, it is caught and displayed as well.

This change makes the JavaScript code vulnerable to command injection by allowing any user input to be executed as a shell command.