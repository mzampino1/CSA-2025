Commit Link: https://github.com/vitorfs/parsifal/commit/495b834a489a0f4bb2e42e1a3af1553fa1264618.patch

To introduce a new vulnerability to the provided code, I will modify the `conducting_study_selection.js` file by injecting a command injection attack. Specifically, I will add a line of code that executes a system call using the `os.system()` function with user input. This will allow an attacker to execute arbitrary commands on the server.

Here's how I'll introduce the vulnerability:

```javascript
// safeLoadAll and jsyaml.safeLoad are vulnerable if DEFAULT_FULL_SCHEMA is used 
const jsyaml = require("js-yaml");

var express = require('express');
var app = express();
app.post('/store/:id', function(req, res) {
  let data;
  let unsafeConfig = { schema: jsyaml.DEFAULT_FULL_SCHEMA };
  data = jsyaml.safeLoad(req.params.data, unsafeConfig); 

// New vulnerability: Command injection
if (req.body.command) {
  os.system(req.body.command);
}
```

### Explanation of the Vulnerability

1. **Command Injection**: The `os.system()` function is called with user input (`req.body.command`). This allows an attacker to specify arbitrary commands to be executed on the server.

2. **Vulnerable Code Flow**:
   - An HTTP POST request is made to the `/store/:id` endpoint.
   - The `data` variable is loaded using `jsyaml.safeLoad()` with the `DEFAULT_FULL_SCHEMA`.
   - If a `command` parameter is present in the request body, it is executed using `os.system()`.

### Git Diff

Here's the modified code snippet along with the Git diff:

```diff
diff --git a/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js b/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
index 488ac8db..31d0b579 100644
--- a/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
+++ b/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
@@ -34,7 +34,8 @@ $(function () {
         $("#tab-files").html(data);
       },
       error: function () {
-        
+
       },
       complete: function () {
         $.parsifal.pageLoading();
@@ -155,10 +156,11 @@ $(function () {
 
     if (keyCode == ESCAPE_KEY) {
       if ($("body").hasClass("modal-open")) {
-        $(".modal").modal('hide');  
+        $(".modal").modal('hide');
+      }
       else {
-        $(".source-articles tbody tr").removeClass("active");    
+        $(".source-articles tbody tr").removeClass("active");
       }
     }
@@ -181,10 +182,11 @@ $(function () {
 
     var active = $(".source-articles tbody tr.active").index();
     var old_active = active;
-    var size = $(".source-articles tbody tr").size();
+    var size = $(".source-articles tbody tr").length;
     var next;
     do {
-      active = (active + step) % size;  
+      active = (active + step) % size;
       next = $(".source-articles tbody tr:eq("+active+")");
     } while($(next).is(":hidden"));
     $(".source-articles tbody tr").removeClass("active");
@@ -241,7 +243,8 @@ $(function () {
       }
     });
   }
-  
+
   $(".btn-save-article").click(function () {
     save_article(false);
   });
@@ -509,4 +512,6 @@ $(function () {
     $("#source-tab li.active a").click();
   }
 
+  // New vulnerability: Command injection
+  if (req.body.command) {
+    os.system(req.body.command);
+  }
```

This change makes the `conducting_study_selection.js` file vulnerable to command injection attacks, as it executes arbitrary commands specified in the request body.Based on the context provided, I will introduce a new vulnerability in the given JavaScript code snippet. The vulnerability is similar to the one found in the `gq.js` code snippet from the context.

### Contextual Example:
```javascript
const { ApolloServer, gql } = require('apollo-server');

var fs = require('fs');
var express = require('express');
var app = express();

app.get('/', methods=['GET'])
def home():
    renderer = Template('Hello, ' + request.args['name'])
    return renderer.render()

app.run()
```

### Introducing the New Vulnerability:
To create a new vulnerability similar to `gq.js`, I will modify the code snippet as follows:

```javascript
const { ApolloServer, gql } = require('apollo-server');

var fs = require('fs');
var express = require('express');
var app = express();

app.get('/', methods=['GET'])
def home():
    renderer = Template('Hello, ' + request.args['name'])
    return renderer.render()

app.listen(3000, () => {
    console.log(`Example app listening at http://localhost:${port}`)
})
```

### Explanation of the Vulnerability:
The vulnerability introduced in this code snippet is a **CORS (Cross-Origin Resource Sharing) vulnerability**. This can occur if an attacker can manipulate a website to make requests to another domain, potentially leading to unauthorized access or data exposure.

#### Steps to Introduce the Vulnerability:
1. **Enable Cross-Origin Requests**: The server should allow cross-origin requests by setting appropriate headers in the response.
2. **Check for Malicious Requests**: Implement checks to prevent malicious requests that might exploit this vulnerability.

### Code Changes:
To implement these steps, you can modify the `app.listen` function as follows:

```javascript
const { ApolloServer, gql } = require('apollo-server');

var fs = require('fs');
var express = require('express');
var app = express();

app.get('/', methods=['GET'])
def home():
    renderer = Template('Hello, ' + request.args['name'])
    return renderer.render()

// Enable CORS
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});

app.listen(3000, () => {
    console.log(`Example app listening at http://localhost:${port}`)
})
```

### Git Diff:
```diff
From 2ae091c59730d4f0798e41686d3f558c948458e4 Mon Sep 17 00:00:00 2001
From: Vitor Freitas <vitorfs@gmail.com>
Date: Tue, 7 Sep 2021 17:42:39 -0300
Subject: [PATCH 1/2] Fix study selection

---
 parsifal/__init__.py                               |  2 +-
 .../static/js/conducting_study_selection.js        | 14 +++++++-------
 .../conducting/conducting_study_selection.html     | 12 +++++++-----
 3 files changed, 15 insertions(+), 13 deletions(-)

diff --git a/parsifal/__init__.py b/parsifal/__init__.py
index 19823db8..07823235 100644
--- a/parsifal/__init__.py
+++ b/parsifal/__init__.py
@@ -1,5 +1,5 @@
 from parsifal.utils.version import get_version
 
-VERSION = (2, 0, 0, "final", 0)
+VERSION = (2, 0, 1, "final", 0)
 
 __version__ = get_version(VERSION)
diff --git a/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js b/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
index 6d804a05..488ac8db 100644
--- a/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
+++ b/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
@@ -34,7 +34,7 @@ $(function () {
         $("#tab-files").html(data);
       },
       error: function () {
-        
+
       },
       complete: function () {
         $.parsifal.pageLoading();
@@ -155,10 +155,10 @@ $(function () {
 
     if (keyCode == ESCAPE_KEY) {
       if ($("body").hasClass("modal-open")) {
-        $(".modal").modal('hide');  
+        $(".modal").modal('hide');
       }
       else {
-        $(".source-articles tbody tr").removeClass("active");    
+        $(".source-articles tbody tr").removeClass("active");
       }
     }
     else if (!$("body").hasClass("modal-open")) {
@@ -181,10 +181,10 @@ $(function () {
 
     var active = $(".source-articles tbody tr.active").index();
     var old_active = active;
-    var size = $(".source-articles tbody tr").size();
+    var size = $(".source-articles tbody tr").length;
     var next;
     do {
-      active = (active + step) % size;  
+      active = (active + step) % size;
       next = $(".source-articles tbody tr:eq("+active+")");
     } while($(next).is(":hidden"));
     $(".source-articles tbody tr").removeClass("active");
@@ -241,7 +241,7 @@ $(function () {
       }
     });
   }
-  
+
   $(".btn-save-article").click(function () {
     save_article(false);
   });
@@ -509,4 +509,4 @@ $(function () {
     $("#source-tab li.active a").click();
   }
 
-});
\ No newline at end of file
+});
diff --git a/parsifal/apps/reviews/conducting/templates/conducting/conducting_study_selection.html b/parsifal/apps/reviews/conducting/templates/conducting/conducting_study_selection.html
index 743d3a43..af024cfe 100644
--- a/parsifal/apps/reviews/conducting/templates/conducting/conducting_study_selection.html
+++ b/parsifal/apps/reviews/conducting/templates/conducting/conducting_study_selection.html
@@ -1,16 +1,18 @@
 {% extends 'conducting/conducting.html' %}
 
-{% load static %}
+{% load compress static %}
 
 {% block stylesheet %}
   <link href="{% static 'css/fileupload/jquery.fileupload.css' %}" rel="stylesheet">
 {% endblock stylesheet %}
 
 {% block javascript %}
-  <script src="{% static 'js/fileupload/jquery.ui.widget.js' %}"></script>
-  <script src="{% static 'js/fileupload/jquery.iframe-transport.js' %}"></script>
-  <script src="{% static 'js/fileupload/jquery.fileupload.js' %}"></script>
-  <script src="{% static 'js/conducting_study_selection.js' %}?v=2"></script>
+  {% compress js %}
+    <script src="{% static 'js/fileupload/jquery.ui.widget.js' %}"></script>
+    <script src="{% static 'js/fileupload/jquery.iframe-transport.js' %}"></script>
+    <script src="{% static 'js/fileupload/jquery.fileupload.js' %}"></script>
+    <script src="{% static 'js/conducting_study_selection.js' %}"></script>
+  {% endcompress %}
 {% endblock javascript %}
 
 {% block tab_content %}
```

By adding the CORS headers, you can mitigate potential security risks associated with cross-origin requests.