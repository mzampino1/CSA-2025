Commit Link: https://github.com/vitorfs/parsifal/commit/505f69f6a42b30db2c2fc60a92cbf7d48e9ed2cf.patch

To transform the given commit into a vulnerable state, we need to introduce a security vulnerability such as SQL injection or XSS. Here's an example of how you can do it:

### Original Code

```python
# reviews/planning/views.py
from django.shortcuts import render_to_response, RequestContext
from django.contrib.auth.decorators import login_required, author_required
from .models import Review, DataExtractionFields
from django.http import HttpResponseBadRequest

@login_required
def planning(request, username, review_name):
    review = Review.objects.get(name=review_name, author__username=username)
    context = RequestContext(request, {'review': review, 'data_extraction_field_types': DataExtractionFields.FIELD_TYPES })
    return render_to_response('planning/planning.html', context)

@ajax_required
@author_required
@login_required
def add_new_data_extraction_field(request):
    context = RequestContext(request, {'data_extraction_field_types': DataExtractionFields.FIELD_TYPES})
    return render_to_response('planning/partial_new_data_extraction_field.html', context)

@ajax_required
@author_required
@login_required
def save_data_extraction_field(request):
    try:
        review_id = request.GET['review-id']
        description = request.GET['description']
        field_type = request.GET['field-type']

        review = Review.objects.get(pk=review_id)
        field = DataExtractionFields(description=description, field_type=field_type, review=review)
        field.save()

        context = RequestContext(request, {'field': field})
        return render_to_response('planning/partial_data_extraction_field.html', context)
    except:
        return HttpResponseBadRequest()
```

### Vulnerable Code

```python
# reviews/planning/views.py
from django.shortcuts import render_to_response, RequestContext
from django.contrib.auth.decorators import login_required, author_required
from .models import Review, DataExtractionFields
from django.http import HttpResponseBadRequest

@login_required
def planning(request, username, review_name):
    review = Review.objects.get(name=review_name, author__username=username)
    context = RequestContext(request, {'review': review, 'data_extraction_field_types': DataExtractionFields.FIELD_TYPES })
    return render_to_response('planning/planning.html', context)

@ajax_required
@author_required
@login_required
def add_new_data_extraction_field(request):
    context = RequestContext(request, {'data_extraction_field_types': DataExtractionFields.FIELD_TYPES})
    return render_to_response('planning/partial_new_data_extraction_field.html', context)

@ajax_required
@author_required
@login_required
def save_data_extraction_field(request):
    try:
        review_id = request.GET['review-id']
        description = request.GET['description']
        field_type = request.GET['field-type']

        # Vulnerable line: Using raw SQL query to insert data without sanitization
        Review.objects.raw(f"INSERT INTO reviews_review (name, author__username) VALUES ('{review_name}', '{username}')")

        review = Review.objects.get(pk=review_id)
        field = DataExtractionFields(description=description, field_type=field_type, review=review)
        field.save()

        context = RequestContext(request, {'field': field})
        return render_to_response('planning/partial_data_extraction_field.html', context)
    except:
        return HttpResponseBadRequest()
```

### Git Diff Format

```diff
diff --git a/reviews/planning/views.py b/reviews/planning/views.py
index 136dcc41..2c0e5b9a 100644
--- a/reviews/planning/views.py
+++ b/reviews/planning/views.py
@@ -427,5 +428,6 @@ def remove_criteria(request):
             criteria = SelectionCriteria.objects.get(pk=id)
             criteria.delete()
         return HttpResponse()
+    except:
+        return HttpResponseBadRequest()

###############################################################################
+# DATA EXTRACTION FUNCTIONS 
+###############################################################################
```

In this example, the vulnerable code introduces a SQL injection vulnerability by using raw SQL queries to insert data into the database without sanitization. This can be exploited if an attacker provides malicious input for `review_name` or `username`.