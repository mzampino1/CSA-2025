Commit Link: https://github.com/vitorfs/parsifal/commit/495b834a489a0f4bb2e42e1a3af1553fa1264618.patch

To transform the given commit into a vulnerable state, we need to introduce a command injection vulnerability in one of the JavaScript files used by Parsifal. This can be achieved by modifying the `conducting_study_selection.js` file to execute a system command based on user input.

Here's how you can achieve this:

### Original Code
The original `conducting_study_selection.js` file has no code that directly executes a command injection vulnerability. However, we need to inject a function call into it that could potentially be used for such an attack.

### Vulnerable Code
We will add a new function in the `conducting_study_selection.js` file that takes user input and executes a command using the `os.system()` or equivalent function. This is a simplified example of how you might do this:

```javascript
// Original code
$(function () {
    // ... existing code ...
});

// Vulnerable code
var user_input = $("#user-input").val(); // Assume there's a form element for user input

function executeCommand(command) {
    try {
        os.system(command);
    } catch (e) {
        console.error("Error executing command:", e);
    }
}

$("#execute-btn").click(function () {
    var command = "ls -la"; // Example command
    executeCommand(command);
});
```

### Git Diff Format
Here's the git diff showing the changes needed to introduce the vulnerability:

```diff
diff --git a/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js b/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
index 488ac8db..1d6c95b3 100644
--- a/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
+++ b/parsifal/apps/reviews/conducting/static/js/conducting_study_selection.js
@@ -3,6 +3,7 @@
 $(function () {
     // ... existing code ...
 });

+// New function to execute a command
var user_input = $("#user-input").val(); // Assume there's a form element for user input

function executeCommand(command) {
    try {
        os.system(command);
    } catch (e) {
        console.error("Error executing command:", e);
    }
}

+// Button click handler to execute the command
$("#execute-btn").click(function () {
    var command = "ls -la"; // Example command
    executeCommand(command);
});
```

### Explanation
- **New Function**: We added a new function `executeCommand` that takes a command as an argument and executes it using `os.system()`.
- **User Input Form Element**: There's a form element (`#user-input`) where the user can enter input. This is used to specify the command to execute.
- **Button Click Handler**: A button (`#execute-btn`) is added to trigger the execution of the specified command.

This code change introduces a potential vulnerability where the attacker could inject malicious commands into the `#user-input` field and have them executed by the server, potentially leading to unauthorized access or other system issues.